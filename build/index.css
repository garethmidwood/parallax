/* base */
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;600;700&display=swap");
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/* Breakpoints */
/* Leaving this here for use in development, should not go live */
/* Header */
/* Navigation */
/* Hero */
/* Buttons */
/* Main */
/* third parties */
/* generic */
/* tags first */
body {
  font-family: "Open Sans", serif;
  font-size: 16px;
  font-weight: 400; }
  @media (max-width: 61.24em) {
    body {
      font-size: 12px; } }

h1 {
  font-family: "Montserrat", serif;
  font-size: 70px;
  font-weight: 700;
  text-align: center;
  text-transform: uppercase; }
  @media (max-width: 61.24em) {
    h1 {
      font-size: 50px; } }

h2 {
  font-family: "Open Sans", serif;
  font-size: 26px;
  font-weight: 700;
  letter-spacing: -1px;
  text-align: left; }
  @media (max-width: 61.24em) {
    h2 {
      font-size: 16px; } }

strong {
  font-weight: 700; }

/* classes last */
.title {
  font-size: 50px;
  font-family: "Montserrat", serif;
  font-weight: 700;
  line-height: 50px;
  text-align: center;
  text-transform: uppercase; }

/* components */
.cta-button {
  background-color: #f93b84;
  border-radius: 30px;
  color: #fff;
  display: inline-block;
  filter: drop-shadow(0px 5px 4px rgba(32, 0, 187, 0.3));
  font-size: 75%;
  font-weight: 700;
  height: 60px;
  line-height: 60px;
  padding: 0 37px;
  position: relative;
  text-decoration: none;
  text-transform: uppercase; }
  .cta-button:hover {
    background-color: #c80651; }
  .cta-button .shadow {
    position: absolute;
    top: -3px;
    left: -3px;
    bottom: -3px;
    right: -3px;
    border: 1px solid #f93b84;
    border-radius: 30px; }

header {
  color: #9797ff; }
  header .notification {
    background-color: #000095;
    font-size: 75%;
    line-height: 60px;
    text-align: center; }
    header .notification a {
      color: #f93b84;
      font-weight: 700;
      margin-left: 14px; }
      header .notification a:hover {
        color: #c80651; }

.hero {
  position: relative;
  /* I left out the video as the  */ }
  .hero .cover {
    -o-object-fit: cover;
       object-fit: cover;
    width: 100%; }
  .hero .overlay {
    height: 100%;
    min-width: 100%;
    position: absolute;
    top: 0; }
    .hero .overlay.radial {
      background-image: linear-gradient(218deg, #7f3fd1 0%, #3b8ef9 100%);
      opacity: 0.05; }
    .hero .overlay.message {
      align-items: center;
      color: #fff;
      display: flex;
      justify-content: center;
      text-align: center; }
      .hero .overlay.message h1 {
        max-width: 720px;
        margin-bottom: 18px; }
      .hero .overlay.message p {
        margin: 0 auto 45px;
        max-width: 370px; }
  .hero .footer {
    bottom: 0;
    color: #fff;
    font-size: 87.5%;
    height: 120px;
    left: 0;
    letter-spacing: 1px;
    position: absolute;
    right: 0; }
    .hero .footer div {
      margin: 0 auto;
      border-top: 1px solid #fff;
      max-width: 50%;
      padding-top: 33px;
      text-align: center;
      text-transform: uppercase; }

.navigation {
  background-color: black;
  line-height: 80px;
  position: relative;
  text-align: center; }
  .navigation .logo {
    height: 25px;
    position: absolute;
    left: 45px;
    top: 27px; }
    @media (max-width: 61.24em) {
      .navigation .logo {
        position: fixed;
        top: 17px; } }
  .navigation .menu {
    display: inline-block;
    font-size: 87.5%; }
    .navigation .menu li {
      display: inline;
      margin: 0 45px; }
      .navigation .menu li a {
        color: #fff;
        text-decoration: none; }
        .navigation .menu li a:hover {
          color: #cccccc; }
  .navigation .cta-button {
    font-size: 75%;
    position: absolute;
    right: 16px;
    top: 10px; }

main {
  color: #5a6488;
  max-width: 1100px;
  margin: 50px auto 0; }
  @media (max-width: 61.24em) {
    main {
      max-width: 960px; } }
  main .row {
    display: flex;
    width: 100%; }
    @media (max-width: 61.24em) {
      main .row {
        display: block;
        padding: 40px 20px;
        width: auto; } }
    main .row > div {
      flex-basis: 50%;
      line-height: 30px;
      padding: 80px; }
      @media (max-width: 61.24em) {
        main .row > div {
          padding: 0; } }
      main .row > div.title {
        line-height: 50px;
        text-align: left;
        color: #fff;
        text-shadow: 0 0 1px #3b8ef9; }
        main .row > div.title span {
          color: #3b8ef9;
          display: block; }
      main .row > div img {
        width: 120%;
        margin: -80px 0 0 -20%; }
        @media (max-width: 61.24em) {
          main .row > div img {
            display: block;
            margin: 0 auto;
            width: 50%; } }
      main .row > div.image-right img {
        margin: -80px -20% 0 0; }
        @media (max-width: 61.24em) {
          main .row > div.image-right img {
            margin: 0 auto; } }
      main .row > div h2 {
        color: #2a4789;
        margin-bottom: 40px; }
      main .row > div p {
        margin-bottom: 40px; }
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
